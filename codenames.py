#!/usr/bin/env python3
# -*- coding: utf-8 -*-
'''
Created on Fri Mar 23 14:47:49 2018

@author: hae

'''

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Datamuse API
# You can learn more about it here: datamuse.com/api
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

from datamuse import datamuse
api = datamuse.Datamuse()
api.set_max_default(1000)

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# The following functions turn Datamuse API output data into a dictionary.
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

def jja(word):
    '''
    Assume word is a text string.
    Return dictionary of nouns associated with the word in adjectival form.
    '''
    data = api.words(rel_jja=word)
    jjaDict = {}
    for num in range(len(data)):
        key = data[num]['word']
        value = data[num]['score']
        jjaDict[key] = value
    return(jjaDict)

def jjb(word):
    '''
    Assume word is a text string.
    Return dictionary of adjectives used to describe the word.
    '''
    data = api.words(rel_jjb=word)
    jjbDict = {}
    for num in range(len(data)):
        key = data[num]['word']
        value = data[num]['score']
        jjbDict[key] = value
    return(jjbDict)

def trg(word):
    '''
    Assume word is a text string.
    Return dictionary of words that are strongly associated with the word.
    '''
    data = api.words(rel_trg=word)
    trgDict = {}
    for num in range(len(data)):
        key = data[num]['word']
        value = data[num]['score']
        trgDict[key] = value
    return(trgDict)

def lc(word):
    '''
    Assume word is a text string.
    Return dictionary of terms often follow the word in sentences.
    '''
    data = api.words(lc=word)
    lcDict = {}
    for num in range(len(data)):
        key = data[num]['word']
        value = data[num]['score']
        lcDict[key] = value
    return(lcDict)

# This function is not currently used because it returns too many irrelevant
# results. It may be incorporated in future versions, however, so I'm keeping it in.
def ml(word):
    '''
    Assume word is a text string.
    Return dictionary of terms with similar meanings to the word.
    '''
    data = api.words(ml=word)
    mlDict = {}
    for num in range(len(data)):
        key = data[num]['word']
        value = data[num]['score']
        mlDict[key] = value
    return(mlDict)

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Combine the dictionaries generated by all five functions.
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

def allDicts(word):
    '''
    Assume word is a text string.
    Return a single dictionary of all related terms and their scores.
    '''
#    allDictsList = [jja(word),jjb(word),trg(word),lc(word),ml(word)]
    allDictsList = [jja(word),jjb(word),trg(word),lc(word)]
    allDicts = {}
    for dictionaries in range(len(allDictsList)):
        for entry in allDictsList[dictionaries]:
            if ' ' not in entry:   # Removes terms that are two words
                if entry in allDicts:
                    allDicts[entry] += allDictsList[dictionaries][entry]
                else:
                    allDicts[entry] = allDictsList[dictionaries][entry]
            else:
                pass
    return allDicts

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Figure out which words are in common.
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

def overlapDict(wordList):
    '''
    Assume wordList is a list of text strings.
    Return dictionary of common terms and scores among the words in wordList.
    '''
    # Create a list where each element is a dictionary of terms and scores for
    # all words.
    dictList = []
    for word in wordList:
        dictList.append(allDicts(word))
        
    # Create a dictionary of terms that are present in the dictionaries of all
    # words being considered.
    overlapDict = {}
    for element in range(len(dictList)-1):
        if element == 0:
            for entry in dictList[element]:
                if entry in dictList[element+1]:
                    overlapDict[entry] = dictList[element][entry] + dictList[element+1][entry]
                else:
                    pass
        else:
            for entry in dictList[element+1]:
                if entry in overlapDict:
                    overlapDict[entry] += dictList[element+1][entry]
                else:
                    pass
    overlapDict = deleteCommonWordsAndPunctuation(overlapDict)
    overlapList = makeList(overlapDict)
    return overlapList

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
# Make dictionaries more useful by deleting punctuation and sorting.
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# This is a list of common words that are generally not descriptive.
common = ['where','off','while','ii','should','before','upon','went','between','may','i','I','is','was','has','had','are','must','during','were','itself','does','through','based','the','be','to','of','and','a','in','that','have','I','it','for','not','on','with','he','as','you','do','at','this','but','his','by','from','they','we','say','her','she','or','an','will','my','one','all','would','there','their','what','so','up','out','if','about','who','get','which','go','me','when','make','can','like','time','no','just','him','know','take','people','into','year','your','good','some','could','them','see','other','than','then','now','look','only','come','its','over','think','also','back','after','use','two','how','our','work','first','well','way','even','new','want','because','any','these','give','day','most','us']
import string

def deleteCommonWordsAndPunctuation(D):
    '''
    Assume D is a dictionary.
    Return a dictionary that excludes irrelevant terms, including punctuation
    and common words like "I" and "are."
    '''
    for word in common:
        if word in D.keys():
            del D[word]
    for mark in string.punctuation:
        if mark in D.keys():
            del D[mark]
    return D
    
def makeList(D):
    '''
    Assume D is a dictionary.
    Return a list of tuples of key-value pairs sorted first by score then alphabetically.
    '''
    sortedList = list(D.items())
    sortedList = sorted(sortedList, key = lambda x: (-x[1],x[0]))
    return sortedList

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Gather spymaster input, the list of words.
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

wordList = []
print("Hello! This program suggests hints to spymasters playing the game Codenames.")
print("Please enter two or more words you'd like to get hints for.")

while len(wordList) < 2:
    word = input("Please enter your word/codename: ")
    if not word.isalpha():
        print("That's not a valid word. Please enter one word composed entirely of alphabetic characters.")
    else:
        wordList.append(word)
        print("Thanks! I just added %s to your list of words." % (word))

while word != "I'm done":
    print("If you're done adding words, type 'I'm done'.")
    word = input("Otherwise, add another word: ")
    if word == "I'm done":
        break
    elif not word.isalpha():
        print("That's not a valid word. Please enter one word composed entirely of alphabetic characters.")
    else:
        wordList.append(word)
        print("Thanks! I just added %s to your list of words." % (word))

print()
print('- '*15)
print()

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Print program output.
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

results = overlapDict(wordList)

print("For the following list of words: ")
for words in wordList:
    print(" - " + words)

print()

def output(results):
    if len(results) == 0:
        print("Sorry, we couldn't find any hints for your list of words. Try again with a smaller number of words!")
    else:
        print("...there are " + str(len(results)) + " terms that could serve as hints.")
        print("They are ordered by their likelihood of being a relevant term:")
        printResults(results)

def printResults(results):
    '''
    Assume results is a list of text strings.
    Return the list's elements in an easier-to-read format.
    '''
    for element in results:
        print(" - " + element[0] + " (" + str(element[1]) + ")")
    
output(results)
